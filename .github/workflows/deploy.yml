name: Get All SES Templates and Create PR with HTML (Secure API Key)

# Define environment variables for credentials (securely stored in GitHub secrets)
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}Â # Optional, if not specified in Boto3 configuration

on:
  workflow_dispatch:

jobs:
  get_templates_and_create_pr:  # Unique job name
    runs-on: ubuntu-latest  # Specify the runner environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: pip install boto3

      - name: Fetch SES templates and create PR
        run:  |
              python - <<EOF
              import os
              import boto3
              import subprocess

              # Create Boto3 session using environment variables
              session = boto3.Session(
                aws_access_key_id=os.environ['AWS_ACCESS_KEY_ID'],
                aws_secret_access_key=os.environ['AWS_SECRET_ACCESS_KEY'],
                region_name=os.environ.get('AWS_REGION')  # Optional
              )

              # Create SES client
              client = session.client('ses')

              # Get a list of all templates
              templates = client.list_templates()['Templates']

              # Loop through each template name
              for template in templates:
                template_name = template['Name']
                # Get template content from SES
                response = client.get_template(TemplateName=template_name)
                template_html = response['Template']['Html']

                # Save template to file using a descriptive filename
                with open(f"{template_name}.html", "w") as f:
                  f.write(template_html)

                # Check for changes and add to PR if needed
                diff_command = f"git diff --unified=0 {template_name}.html"
                diff_output = subprocess.run(diff_command, shell=True, capture_output=True, text=True)
                if diff_output.returncode == 0:
                  print(f"Template '{template_name}' unchanged. Skipping update.")
                else:
                  print(f"Changes detected in '{template_name}'. Adding to PR.")
                add_command = f"git add {template_name}.html"
                subprocess.run(add_command, shell=True)

              # Commit changes, push to repository, and create Pull Request
              subprocess.run("git commit -m 'Update all SES templates from API'", shell=True)
              subprocess.run("git push origin main", shell=True)
              subprocess.run("gh pr create", shell=True)
              EOF
          
